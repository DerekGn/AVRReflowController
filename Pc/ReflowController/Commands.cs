// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from commands.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class CommandsReflection {

  #region Descriptor
  /// <summary>File descriptor for commands.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CommandsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5jb21tYW5kcy5wcm90byL1AQoHUmVxdWVzdBIlCgdDb21tYW5kGAEgASgO",
          "MhQuUmVxdWVzdC5SZXF1ZXN0VHlwZRIfCgdQcm9maWxlGAIgASgLMg4uUmVm",
          "bG93UHJvZmlsZSKhAQoLUmVxdWVzdFR5cGUSCAoETk9ORRAAEhAKDFNUQVJU",
          "UFJPRklMRRABEg8KC1NUT1BQUk9GSUxFEAISEwoPR0VUUFJPRklMRVNUQUdF",
          "EAMSDgoKR0VUUFJPRklMRRAEEg4KClNFVFBST0ZJTEUQBRILCgdUQ1NUQVRF",
          "EAYSCwoHUkVMQVlPThAHEgwKCFJFTEFZT0ZGEAgSCAoEUElORxAJIqIBCg1S",
          "ZWZsb3dQcm9maWxlEhEKCVN0YXJ0UmF0ZRgBIAEoBRIRCglTb2FrVGVtcDEY",
          "AiABKAUSEQoJU29ha1RlbXAyGAMgASgFEg8KB1NvYWtMZW4YBCABKAUSEAoI",
          "UGVha1RlbXAYBSABKAUSEgoKVGltZVRvUGVhaxgGIAEoBRIQCghDb29sUmF0",
          "ZRgHIAEoBRIPCgdQcmVoZWF0GAggASgFIswBCgxQcm9maWxlU3RhZ2USLgoF",
          "U3RhdGUYASABKA4yHy5Qcm9maWxlU3RhZ2UuUHJvZmlsZVN0YWdlU3RhdGUS",
          "EwoLUmVmbG93VGltZXIYAiABKAUSEgoKVGFyZ2V0VGVtcBgDIAEoBRIOCgZU",
          "Y1RlbXAYBCABKAUiUwoRUHJvZmlsZVN0YWdlU3RhdGUSCAoEU1RPUBAAEgkK",
          "BVNUQVJUEAESCAoEU09BSxACEggKBFBFQUsQAxIICgRDT09MEAQSCwoHUFJF",
          "SEVBVBAFIqcECghSZXNwb25zZRIkCgZSZXN1bHQYASABKA4yFC5SZXNwb25z",
          "ZS5SZXN1bHRUeXBlEiQKBFR5cGUYAiABKA4yFi5SZXNwb25zZS5SZXNwb25z",
          "ZVR5cGUSEQoHVGNTdGF0ZRgDIAEoBUgAEh4KBVN0YWdlGAQgASgLMg0uUHJv",
          "ZmlsZVN0YWdlSAASLAoJRXJyb3JDb2RlGAUgASgOMhcuUmVzcG9uc2UuRXJy",
          "b3JDb2RlVHlwZUgAEiEKB1Byb2ZpbGUYBiABKAsyDi5SZWZsb3dQcm9maWxl",
          "SAAiIwoKUmVzdWx0VHlwZRILCgdTVUNDRVNTEAASCAoERkFJTBABIpgBCgxS",
          "ZXNwb25zZVR5cGUSEAoMU1RBUlRQUk9GSUxFEAASDwoLU1RPUFBST0ZJTEUQ",
          "ARITCg9HRVRQUk9GSUxFU1RBR0UQAhIOCgpHRVRQUk9GSUxFEAMSDgoKU0VU",
          "UFJPRklMRRAEEgsKB1RDU1RBVEUQBRILCgdSRUxBWU9OEAYSDAoIUkVMQVlP",
          "RkYQBxIICgRQSU5HEAgiNQoLQ3ljbGVTdGF0dXMSCwoHUlVOTklORxAAEgsK",
          "B1NUT1BQRUQQARIMCghGSU5JU0hFRBACIkkKDUVycm9yQ29kZVR5cGUSEgoO",
          "VU5LTk9XTkNPTU1BTkQQABIQCgxERUNPREVGQUlMRUQQARISCg5QUk9GSUxF",
          "UlVOTklORxACQgkKB3BheWxvYWRiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Request), global::Request.Parser, new[]{ "Command", "Profile" }, null, new[]{ typeof(global::Request.Types.RequestType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReflowProfile), global::ReflowProfile.Parser, new[]{ "StartRate", "SoakTemp1", "SoakTemp2", "SoakLen", "PeakTemp", "TimeToPeak", "CoolRate", "Preheat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProfileStage), global::ProfileStage.Parser, new[]{ "State", "ReflowTimer", "TargetTemp", "TcTemp" }, null, new[]{ typeof(global::ProfileStage.Types.ProfileStageState) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Response), global::Response.Parser, new[]{ "Result", "Type", "TcState", "Stage", "ErrorCode", "Profile" }, new[]{ "Payload" }, new[]{ typeof(global::Response.Types.ResultType), typeof(global::Response.Types.ResponseType), typeof(global::Response.Types.CycleStatus), typeof(global::Response.Types.ErrorCodeType) }, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Request : pb::IMessage<Request> {
  private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
  public static pb::MessageParser<Request> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandsReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Request(Request other) : this() {
    command_ = other.command_;
    Profile = other.profile_ != null ? other.Profile.Clone() : null;
  }

  public Request Clone() {
    return new Request(this);
  }

  /// <summary>Field number for the "Command" field.</summary>
  public const int CommandFieldNumber = 1;
  private global::Request.Types.RequestType command_ = 0;
  public global::Request.Types.RequestType Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  /// <summary>Field number for the "Profile" field.</summary>
  public const int ProfileFieldNumber = 2;
  private global::ReflowProfile profile_;
  public global::ReflowProfile Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Request);
  }

  public bool Equals(Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    if (!object.Equals(Profile, other.Profile)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Command != 0) hash ^= Command.GetHashCode();
    if (profile_ != null) hash ^= Profile.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Command != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Command);
    }
    if (profile_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Profile);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Command != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
    }
    if (profile_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
    }
    return size;
  }

  public void MergeFrom(Request other) {
    if (other == null) {
      return;
    }
    if (other.Command != 0) {
      Command = other.Command;
    }
    if (other.profile_ != null) {
      if (profile_ == null) {
        profile_ = new global::ReflowProfile();
      }
      Profile.MergeFrom(other.Profile);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          command_ = (global::Request.Types.RequestType) input.ReadEnum();
          break;
        }
        case 18: {
          if (profile_ == null) {
            profile_ = new global::ReflowProfile();
          }
          input.ReadMessage(profile_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Request message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    public enum RequestType {
      [pbr::OriginalName("NONE")] None = 0,
      /// <summary>
      ///  Start oven profile cycle
      /// </summary>
      [pbr::OriginalName("STARTPROFILE")] Startprofile = 1,
      /// <summary>
      ///  Stop oven profile cycle
      /// </summary>
      [pbr::OriginalName("STOPPROFILE")] Stopprofile = 2,
      /// <summary>
      ///  Get the current reflow profile stage
      /// </summary>
      [pbr::OriginalName("GETPROFILESTAGE")] Getprofilestage = 3,
      /// <summary>
      ///  Get the current reflow profile from the device
      /// </summary>
      [pbr::OriginalName("GETPROFILE")] Getprofile = 4,
      /// <summary>
      ///  Set the current reflow profile on the device and store to eeprom
      /// </summary>
      [pbr::OriginalName("SETPROFILE")] Setprofile = 5,
      /// <summary>
      ///  Read raw thermocouple state from MAX6675
      /// </summary>
      [pbr::OriginalName("TCSTATE")] Tcstate = 6,
      /// <summary>
      ///  Switch on the relay
      /// </summary>
      [pbr::OriginalName("RELAYON")] Relayon = 7,
      /// <summary>
      ///  Switch off the relay
      /// </summary>
      [pbr::OriginalName("RELAYOFF")] Relayoff = 8,
      /// <summary>
      ///  Ping the device
      /// </summary>
      [pbr::OriginalName("PING")] Ping = 9,
    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReflowProfile : pb::IMessage<ReflowProfile> {
  private static readonly pb::MessageParser<ReflowProfile> _parser = new pb::MessageParser<ReflowProfile>(() => new ReflowProfile());
  public static pb::MessageParser<ReflowProfile> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandsReflection.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ReflowProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ReflowProfile(ReflowProfile other) : this() {
    startRate_ = other.startRate_;
    soakTemp1_ = other.soakTemp1_;
    soakTemp2_ = other.soakTemp2_;
    soakLen_ = other.soakLen_;
    peakTemp_ = other.peakTemp_;
    timeToPeak_ = other.timeToPeak_;
    coolRate_ = other.coolRate_;
    preheat_ = other.preheat_;
  }

  public ReflowProfile Clone() {
    return new ReflowProfile(this);
  }

  /// <summary>Field number for the "StartRate" field.</summary>
  public const int StartRateFieldNumber = 1;
  private int startRate_;
  /// <summary>
  ///  The heatup rate for the profile in C second
  /// </summary>
  public int StartRate {
    get { return startRate_; }
    set {
      startRate_ = value;
    }
  }

  /// <summary>Field number for the "SoakTemp1" field.</summary>
  public const int SoakTemp1FieldNumber = 2;
  private int soakTemp1_;
  /// <summary>
  ///  The first soak temperature 
  /// </summary>
  public int SoakTemp1 {
    get { return soakTemp1_; }
    set {
      soakTemp1_ = value;
    }
  }

  /// <summary>Field number for the "SoakTemp2" field.</summary>
  public const int SoakTemp2FieldNumber = 3;
  private int soakTemp2_;
  /// <summary>
  ///  The second saok temperature
  /// </summary>
  public int SoakTemp2 {
    get { return soakTemp2_; }
    set {
      soakTemp2_ = value;
    }
  }

  /// <summary>Field number for the "SoakLen" field.</summary>
  public const int SoakLenFieldNumber = 4;
  private int soakLen_;
  /// <summary>
  ///  The amount of time in seconds between the first and second soak
  /// </summary>
  public int SoakLen {
    get { return soakLen_; }
    set {
      soakLen_ = value;
    }
  }

  /// <summary>Field number for the "PeakTemp" field.</summary>
  public const int PeakTempFieldNumber = 5;
  private int peakTemp_;
  /// <summary>
  ///  The peak temperature
  /// </summary>
  public int PeakTemp {
    get { return peakTemp_; }
    set {
      peakTemp_ = value;
    }
  }

  /// <summary>Field number for the "TimeToPeak" field.</summary>
  public const int TimeToPeakFieldNumber = 6;
  private int timeToPeak_;
  /// <summary>
  ///  The amount of time to 
  /// </summary>
  public int TimeToPeak {
    get { return timeToPeak_; }
    set {
      timeToPeak_ = value;
    }
  }

  /// <summary>Field number for the "CoolRate" field.</summary>
  public const int CoolRateFieldNumber = 7;
  private int coolRate_;
  /// <summary>
  ///  The cool rate in C second
  /// </summary>
  public int CoolRate {
    get { return coolRate_; }
    set {
      coolRate_ = value;
    }
  }

  /// <summary>Field number for the "Preheat" field.</summary>
  public const int PreheatFieldNumber = 8;
  private int preheat_;
  /// <summary>
  ///  The pre heat threshold in C
  /// </summary>
  public int Preheat {
    get { return preheat_; }
    set {
      preheat_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ReflowProfile);
  }

  public bool Equals(ReflowProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartRate != other.StartRate) return false;
    if (SoakTemp1 != other.SoakTemp1) return false;
    if (SoakTemp2 != other.SoakTemp2) return false;
    if (SoakLen != other.SoakLen) return false;
    if (PeakTemp != other.PeakTemp) return false;
    if (TimeToPeak != other.TimeToPeak) return false;
    if (CoolRate != other.CoolRate) return false;
    if (Preheat != other.Preheat) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (StartRate != 0) hash ^= StartRate.GetHashCode();
    if (SoakTemp1 != 0) hash ^= SoakTemp1.GetHashCode();
    if (SoakTemp2 != 0) hash ^= SoakTemp2.GetHashCode();
    if (SoakLen != 0) hash ^= SoakLen.GetHashCode();
    if (PeakTemp != 0) hash ^= PeakTemp.GetHashCode();
    if (TimeToPeak != 0) hash ^= TimeToPeak.GetHashCode();
    if (CoolRate != 0) hash ^= CoolRate.GetHashCode();
    if (Preheat != 0) hash ^= Preheat.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (StartRate != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StartRate);
    }
    if (SoakTemp1 != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SoakTemp1);
    }
    if (SoakTemp2 != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SoakTemp2);
    }
    if (SoakLen != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SoakLen);
    }
    if (PeakTemp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PeakTemp);
    }
    if (TimeToPeak != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TimeToPeak);
    }
    if (CoolRate != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CoolRate);
    }
    if (Preheat != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Preheat);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (StartRate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRate);
    }
    if (SoakTemp1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoakTemp1);
    }
    if (SoakTemp2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoakTemp2);
    }
    if (SoakLen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoakLen);
    }
    if (PeakTemp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeakTemp);
    }
    if (TimeToPeak != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeToPeak);
    }
    if (CoolRate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoolRate);
    }
    if (Preheat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Preheat);
    }
    return size;
  }

  public void MergeFrom(ReflowProfile other) {
    if (other == null) {
      return;
    }
    if (other.StartRate != 0) {
      StartRate = other.StartRate;
    }
    if (other.SoakTemp1 != 0) {
      SoakTemp1 = other.SoakTemp1;
    }
    if (other.SoakTemp2 != 0) {
      SoakTemp2 = other.SoakTemp2;
    }
    if (other.SoakLen != 0) {
      SoakLen = other.SoakLen;
    }
    if (other.PeakTemp != 0) {
      PeakTemp = other.PeakTemp;
    }
    if (other.TimeToPeak != 0) {
      TimeToPeak = other.TimeToPeak;
    }
    if (other.CoolRate != 0) {
      CoolRate = other.CoolRate;
    }
    if (other.Preheat != 0) {
      Preheat = other.Preheat;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StartRate = input.ReadInt32();
          break;
        }
        case 16: {
          SoakTemp1 = input.ReadInt32();
          break;
        }
        case 24: {
          SoakTemp2 = input.ReadInt32();
          break;
        }
        case 32: {
          SoakLen = input.ReadInt32();
          break;
        }
        case 40: {
          PeakTemp = input.ReadInt32();
          break;
        }
        case 48: {
          TimeToPeak = input.ReadInt32();
          break;
        }
        case 56: {
          CoolRate = input.ReadInt32();
          break;
        }
        case 64: {
          Preheat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProfileStage : pb::IMessage<ProfileStage> {
  private static readonly pb::MessageParser<ProfileStage> _parser = new pb::MessageParser<ProfileStage>(() => new ProfileStage());
  public static pb::MessageParser<ProfileStage> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandsReflection.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ProfileStage() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ProfileStage(ProfileStage other) : this() {
    state_ = other.state_;
    reflowTimer_ = other.reflowTimer_;
    targetTemp_ = other.targetTemp_;
    tcTemp_ = other.tcTemp_;
  }

  public ProfileStage Clone() {
    return new ProfileStage(this);
  }

  /// <summary>Field number for the "State" field.</summary>
  public const int StateFieldNumber = 1;
  private global::ProfileStage.Types.ProfileStageState state_ = 0;
  /// <summary>
  ///  The current reflow profile state
  /// </summary>
  public global::ProfileStage.Types.ProfileStageState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "ReflowTimer" field.</summary>
  public const int ReflowTimerFieldNumber = 2;
  private int reflowTimer_;
  /// <summary>
  ///  The current reflow profile time in seconds
  /// </summary>
  public int ReflowTimer {
    get { return reflowTimer_; }
    set {
      reflowTimer_ = value;
    }
  }

  /// <summary>Field number for the "TargetTemp" field.</summary>
  public const int TargetTempFieldNumber = 3;
  private int targetTemp_;
  /// <summary>
  ///  The calculated target temperature
  /// </summary>
  public int TargetTemp {
    get { return targetTemp_; }
    set {
      targetTemp_ = value;
    }
  }

  /// <summary>Field number for the "TcTemp" field.</summary>
  public const int TcTempFieldNumber = 4;
  private int tcTemp_;
  /// <summary>
  ///  The thermocouple temperature
  /// </summary>
  public int TcTemp {
    get { return tcTemp_; }
    set {
      tcTemp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ProfileStage);
  }

  public bool Equals(ProfileStage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    if (ReflowTimer != other.ReflowTimer) return false;
    if (TargetTemp != other.TargetTemp) return false;
    if (TcTemp != other.TcTemp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (State != 0) hash ^= State.GetHashCode();
    if (ReflowTimer != 0) hash ^= ReflowTimer.GetHashCode();
    if (TargetTemp != 0) hash ^= TargetTemp.GetHashCode();
    if (TcTemp != 0) hash ^= TcTemp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (State != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) State);
    }
    if (ReflowTimer != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ReflowTimer);
    }
    if (TargetTemp != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TargetTemp);
    }
    if (TcTemp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TcTemp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (ReflowTimer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReflowTimer);
    }
    if (TargetTemp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetTemp);
    }
    if (TcTemp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TcTemp);
    }
    return size;
  }

  public void MergeFrom(ProfileStage other) {
    if (other == null) {
      return;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.ReflowTimer != 0) {
      ReflowTimer = other.ReflowTimer;
    }
    if (other.TargetTemp != 0) {
      TargetTemp = other.TargetTemp;
    }
    if (other.TcTemp != 0) {
      TcTemp = other.TcTemp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          state_ = (global::ProfileStage.Types.ProfileStageState) input.ReadEnum();
          break;
        }
        case 16: {
          ReflowTimer = input.ReadInt32();
          break;
        }
        case 24: {
          TargetTemp = input.ReadInt32();
          break;
        }
        case 32: {
          TcTemp = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ProfileStage message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    public enum ProfileStageState {
      /// <summary>
      ///  The reflow profile has stopped
      /// </summary>
      [pbr::OriginalName("STOP")] Stop = 0,
      /// <summary>
      ///  The reflow profile has started
      /// </summary>
      [pbr::OriginalName("START")] Start = 1,
      /// <summary>
      ///  The reflow profile is in soak phase
      /// </summary>
      [pbr::OriginalName("SOAK")] Soak = 2,
      /// <summary>
      ///  The reflow profile has entered peak phase
      /// </summary>
      [pbr::OriginalName("PEAK")] Peak = 3,
      /// <summary>
      ///  The reflow profile is in cooldown phase
      /// </summary>
      [pbr::OriginalName("COOL")] Cool = 4,
      /// <summary>
      ///  The reflow profile is in preheat phase
      /// </summary>
      [pbr::OriginalName("PREHEAT")] Preheat = 5,
    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Response : pb::IMessage<Response> {
  private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
  public static pb::MessageParser<Response> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandsReflection.Descriptor.MessageTypes[3]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Response(Response other) : this() {
    result_ = other.result_;
    type_ = other.type_;
    switch (other.PayloadCase) {
      case PayloadOneofCase.TcState:
        TcState = other.TcState;
        break;
      case PayloadOneofCase.Stage:
        Stage = other.Stage.Clone();
        break;
      case PayloadOneofCase.ErrorCode:
        ErrorCode = other.ErrorCode;
        break;
      case PayloadOneofCase.Profile:
        Profile = other.Profile.Clone();
        break;
    }

  }

  public Response Clone() {
    return new Response(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::Response.Types.ResultType result_ = 0;
  public global::Response.Types.ResultType Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::Response.Types.ResponseType type_ = 0;
  public global::Response.Types.ResponseType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "TcState" field.</summary>
  public const int TcStateFieldNumber = 3;
  /// <summary>
  ///  The raw state of the thermocouple
  /// </summary>
  public int TcState {
    get { return payloadCase_ == PayloadOneofCase.TcState ? (int) payload_ : 0; }
    set {
      payload_ = value;
      payloadCase_ = PayloadOneofCase.TcState;
    }
  }

  /// <summary>Field number for the "Stage" field.</summary>
  public const int StageFieldNumber = 4;
  /// <summary>
  ///  The current Profile stage
  /// </summary>
  public global::ProfileStage Stage {
    get { return payloadCase_ == PayloadOneofCase.Stage ? (global::ProfileStage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Stage;
    }
  }

  /// <summary>Field number for the "ErrorCode" field.</summary>
  public const int ErrorCodeFieldNumber = 5;
  /// <summary>
  ///  The error code
  /// </summary>
  public global::Response.Types.ErrorCodeType ErrorCode {
    get { return payloadCase_ == PayloadOneofCase.ErrorCode ? (global::Response.Types.ErrorCodeType) payload_ : 0; }
    set {
      payload_ = value;
      payloadCase_ = PayloadOneofCase.ErrorCode;
    }
  }

  /// <summary>Field number for the "Profile" field.</summary>
  public const int ProfileFieldNumber = 6;
  /// <summary>
  ///  The reflow profile
  /// </summary>
  public global::ReflowProfile Profile {
    get { return payloadCase_ == PayloadOneofCase.Profile ? (global::ReflowProfile) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Profile;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    TcState = 3,
    Stage = 4,
    ErrorCode = 5,
    Profile = 6,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  public override bool Equals(object other) {
    return Equals(other as Response);
  }

  public bool Equals(Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Type != other.Type) return false;
    if (TcState != other.TcState) return false;
    if (!object.Equals(Stage, other.Stage)) return false;
    if (ErrorCode != other.ErrorCode) return false;
    if (!object.Equals(Profile, other.Profile)) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TcState) hash ^= TcState.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Stage) hash ^= Stage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ErrorCode) hash ^= ErrorCode.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Profile) hash ^= Profile.GetHashCode();
    hash ^= (int) payloadCase_;
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Result);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (payloadCase_ == PayloadOneofCase.TcState) {
      output.WriteRawTag(24);
      output.WriteInt32(TcState);
    }
    if (payloadCase_ == PayloadOneofCase.Stage) {
      output.WriteRawTag(34);
      output.WriteMessage(Stage);
    }
    if (payloadCase_ == PayloadOneofCase.ErrorCode) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ErrorCode);
    }
    if (payloadCase_ == PayloadOneofCase.Profile) {
      output.WriteRawTag(50);
      output.WriteMessage(Profile);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (payloadCase_ == PayloadOneofCase.TcState) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TcState);
    }
    if (payloadCase_ == PayloadOneofCase.Stage) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
    }
    if (payloadCase_ == PayloadOneofCase.ErrorCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
    }
    if (payloadCase_ == PayloadOneofCase.Profile) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
    }
    return size;
  }

  public void MergeFrom(Response other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.TcState:
        TcState = other.TcState;
        break;
      case PayloadOneofCase.Stage:
        Stage = other.Stage;
        break;
      case PayloadOneofCase.ErrorCode:
        ErrorCode = other.ErrorCode;
        break;
      case PayloadOneofCase.Profile:
        Profile = other.Profile;
        break;
    }

  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          result_ = (global::Response.Types.ResultType) input.ReadEnum();
          break;
        }
        case 16: {
          type_ = (global::Response.Types.ResponseType) input.ReadEnum();
          break;
        }
        case 24: {
          TcState = input.ReadInt32();
          break;
        }
        case 34: {
          global::ProfileStage subBuilder = new global::ProfileStage();
          if (payloadCase_ == PayloadOneofCase.Stage) {
            subBuilder.MergeFrom(Stage);
          }
          input.ReadMessage(subBuilder);
          Stage = subBuilder;
          break;
        }
        case 40: {
          payload_ = input.ReadEnum();
          payloadCase_ = PayloadOneofCase.ErrorCode;
          break;
        }
        case 50: {
          global::ReflowProfile subBuilder = new global::ReflowProfile();
          if (payloadCase_ == PayloadOneofCase.Profile) {
            subBuilder.MergeFrom(Profile);
          }
          input.ReadMessage(subBuilder);
          Profile = subBuilder;
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Response message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    public enum ResultType {
      /// <summary>
      ///  Indicates a sucessful command execution
      /// </summary>
      [pbr::OriginalName("SUCCESS")] Success = 0,
      /// <summary>
      ///  Indicates a failure during command execution
      /// </summary>
      [pbr::OriginalName("FAIL")] Fail = 1,
    }

    public enum ResponseType {
      /// <summary>
      ///  Start oven profile cycle
      /// </summary>
      [pbr::OriginalName("STARTPROFILE")] Startprofile = 0,
      /// <summary>
      ///  Stop oven profile cycle
      /// </summary>
      [pbr::OriginalName("STOPPROFILE")] Stopprofile = 1,
      /// <summary>
      ///  Get the current profiles state
      /// </summary>
      [pbr::OriginalName("GETPROFILESTAGE")] Getprofilestage = 2,
      /// <summary>
      ///  Get the devices currently defined profile
      /// </summary>
      [pbr::OriginalName("GETPROFILE")] Getprofile = 3,
      /// <summary>
      ///  Sets the devices current profile
      /// </summary>
      [pbr::OriginalName("SETPROFILE")] Setprofile = 4,
      /// <summary>
      ///  Read raw thermocouple state from MAX6675
      /// </summary>
      [pbr::OriginalName("TCSTATE")] Tcstate = 5,
      /// <summary>
      ///  Switch on the relay
      /// </summary>
      [pbr::OriginalName("RELAYON")] Relayon = 6,
      /// <summary>
      ///  Switch off the relay
      /// </summary>
      [pbr::OriginalName("RELAYOFF")] Relayoff = 7,
      /// <summary>
      ///  Pings the device
      /// </summary>
      [pbr::OriginalName("PING")] Ping = 8,
    }

    public enum CycleStatus {
      /// <summary>
      ///  Oven profile cycle running
      /// </summary>
      [pbr::OriginalName("RUNNING")] Running = 0,
      /// <summary>
      ///  Oven profile cycle stopped
      /// </summary>
      [pbr::OriginalName("STOPPED")] Stopped = 1,
      /// <summary>
      ///  Oven profile cycle finished
      /// </summary>
      [pbr::OriginalName("FINISHED")] Finished = 2,
    }

    public enum ErrorCodeType {
      /// <summary>
      ///  Indicates that the reflow controller could not determine the command
      /// </summary>
      [pbr::OriginalName("UNKNOWNCOMMAND")] Unknowncommand = 0,
      /// <summary>
      ///  Indicates that the decode  of the Request message failed
      /// </summary>
      [pbr::OriginalName("DECODEFAILED")] Decodefailed = 1,
      /// <summary>
      ///  Indicates that the profile is running so command cannot be executed
      /// </summary>
      [pbr::OriginalName("PROFILERUNNING")] Profilerunning = 2,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
